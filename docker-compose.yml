services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    user: ${DB_USER:-postgres}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-taskmanager}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - taskmanager_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-taskmanager}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.taskmanager-api.rule=Host(`labs.taskmanager.hrosario.dev`) && PathPrefix(`/api`)"
      - "traefik.http.routers.taskmanager-api.entrypoints=websecure"
      - "traefik.http.routers.taskmanager-api.tls=true"
      - "traefik.http.services.taskmanager-api.loadbalancer.server.port=5000"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mi-app.rule=Host(`labs.taskmanager.hrosario.dev`)"
      - "traefik.http.routers.mi-app.entrypoints=websecure"
      - "traefik.http.routers.mi-app.tls=true"
      - "traefik.http.services.mi-app.loadbalancer.server.port=80"

volumes:
  taskmanager_pg_data:
